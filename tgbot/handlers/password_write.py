import asyncio
import random
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from datetime import datetime

from tgbot.handlers.message import team_selection, team_name
from tgbot.keyboards.inline import inline_interaction_one, inline_interaction_two, carbon_footprint
from tgbot.keyboards.inline_password import inline_case_pass_one, inline_case_pass_two, inline_case_pass_three
from tgbot.services.db import Database
from tgbot.states.test import DataPass


async def password_write_one(call: CallbackQuery):
    await call.answer(cache_time=5)
    db = Database('database.db')
    db.set_studying_topic_one(call.message.chat.id, call.data.split(':')[1])
    await call.message.answer('–°–ø–∞—Å–∏–±–æ, –º—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. –¢–µ–ø–µ—Ä—å —Ç—ã –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ‚úã')
    await asyncio.sleep(1)

    await call.message.answer(
        '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥üìù')
    await asyncio.sleep(1)

    await call.message.answer(
        '–£–∑–Ω–∞–π –∫–æ–¥ —É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞')
    await asyncio.sleep(1)

    await call.message.answer(
        '–ü–æ–ª—É—á–∏–ª?', reply_markup=inline_case_pass_one)


async def password_write_two(call: CallbackQuery):
    await call.answer(cache_time=5)
    await call.message.answer('–¢—ã –ø–æ–ª—É—á–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞‚öõÔ∏è')
    await asyncio.sleep(1)

    await call.message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–π–¥–∏ —Ñ–æ—Ä–º—É–ª—É –¥–∞–Ω–Ω–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞, '
                              '–ø–æ–∫–∞–∂–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –¥–∞–Ω–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –∏ —Å–≤–µ—Ä—å—Å—è')
    await asyncio.sleep(2)

    await call.message.answer('–ù–∞—à–µ–ª —Ñ–æ—Ä–º—É–ª—É –¥–∞–Ω–Ω–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞?', reply_markup=inline_case_pass_two)


async def password_write_three(call: CallbackQuery):
    await call.answer(cache_time=5)
    await call.message.answer('–î–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –≤–µ—â–µ—Å—Ç–≤–∞ –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è –ø–∞—Ä–æ–ª–µ–º‚ùó')
    await asyncio.sleep(3)
    await call.message.answer('–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å (–ó–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —à—Ä–∏—Ñ—Ç–æ–º)')
    await DataPass.CasePassword.set()


# async def password_write_four(message: types.Message, state: FSMContext):
#     data = await state.get_data()  # —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
#     if not bool(data.get('password_case')):
#         answer = message.text
#         if answer in team_selection:
#             db = Database('database.db')
#             nowdate = datetime.now()
#             newdate = nowdate.strftime("%d/%m/%Y")
#             variant = random.randint(0, 9)
#             db.set_case_number(message.from_user.id, team_selection[answer])
#             if db.counting_variant_case(team_selection[answer], newdate)[0][0] > 10:
#                 await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ 10\n'
#                                      f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—å')
#             else:
#                 check = False
#                 while db.check_variant(newdate, team_selection[answer], variant):
#                     db = Database('database.db')
#                     if db.counting_variant_case(team_selection[answer], newdate)[0][0] > 10:
#                         check = True
#                         break
#                     else:
#                         variant = random.randint(0, 9)
#
#                 if check:
#                     await message.answer(
#                         f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ 10\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—å')
#                 else:
#                     await state.update_data(password_case=answer)
#                     db.set_variant(message.from_user.id, variant)
#                     await message.answer(f'–¢—ã –≤–≤–µ–ª –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –≤–µ—â–µ—Å—Ç–≤–∞!')
#                     await asyncio.sleep(3)
#                     await message.answer(f'–°–µ–π—á–∞—Å —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º '
#                                          f'–æ–¥–Ω—É –∏–∑ –¥–µ—Å—è—Ç–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–πüåü, –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ '
#                                          f'–∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—à—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å–ø–æ—Å–æ–±—ã —Å–Ω–∏–∂–µ–Ω–∏—è '
#                                          f'—É–≥–ª–µ—Ä–æ–¥–Ω–æ–≥–æ —Å–ª–µ–¥–∞', reply_markup=inline_case_pass_three)
#                     await state.finish()
#         else:
#             await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞')


async def password_write_four(message: types.Message, state: FSMContext):
    data = await state.get_data()  # —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if not bool(data.get('password_case')):
        answer = message.text
        if answer in team_selection:
            db = Database('database.db')
            nowdate = datetime.now()
            newdate = nowdate.strftime("%d/%m/%Y")
            # variant = random.randint(0, 9)
            db.set_case_number(message.from_user.id, team_selection[answer])
            db = Database('database.db')
            variant = db.counting_variant_case(team_selection[answer], newdate)[0][0]
            if variant > 9:
                await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ 10\n'
                                     f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—å')
            else:
                await state.update_data(password_case=answer)
                db.set_variant(message.from_user.id, variant)

                await DataPass.next()

                await state.update_data(pass_variant=variant)

                await message.answer(f'–¢—ã –≤–≤–µ–ª –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –≤–µ—â–µ—Å—Ç–≤–∞!')
                await asyncio.sleep(3)
                await message.answer(f'–°–µ–π—á–∞—Å —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º '
                                     f'–æ–¥–Ω—É –∏–∑ –¥–µ—Å—è—Ç–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–πüåü, –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ '
                                     f'–∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—à—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å–ø–æ—Å–æ–±—ã —Å–Ω–∏–∂–µ–Ω–∏—è '
                                     f'—É–≥–ª–µ—Ä–æ–¥–Ω–æ–≥–æ —Å–ª–µ–¥–∞', reply_markup=inline_case_pass_three)
        else:
            await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞')


async def password_write_five(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=5)
    data = await state.get_data()  # —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
    variant = data.get('pass_variant')
    if bool(str(variant).isdigit()):
        await call.message.answer('–ù–µ—Å–∫–æ–ª—å–∫–æ –º–≥–Ω–æ–≤–µ–Ω–∏–π –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å –∑–∞–≤–µ—Ç–Ω—É—é —Ç–µ–º—É')
        await asyncio.sleep(3)

        await call.message.answer('–ï—â–µ —Å–µ–∫—É–Ω–¥–æ—á–∫—É!')
        await asyncio.sleep(2)

        await call.message.answer(f'–ò –Ω–∞–∫–æ–Ω–µ—Ü! –¢—ã –ø–æ–ª—É—á–∞–µ—à—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ <b>{team_name[variant]}</b>',
                                  parse_mode='HTML')
        await asyncio.sleep(5)

        await call.message.answer('–ü–æ–∫–∞–∂–∏ —Ç–µ–º—É –∂–∏–∑–Ω–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É '
                                  '–∏ –æ–Ω –≤—ã–¥–∞—Å—Ç —Ç–µ–±–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–º–æ–¥–∞–Ω—á–∏–∫ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—èüß≥')
        await asyncio.sleep(5)

        await call.message.answer('–ü–æ–ª—É—á–∏–ª —á–µ–º–æ–¥–∞–Ω—á–∏–∫?', reply_markup=inline_interaction_one)
        await state.finish()
    else:
        await call.message.answer('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
        await call.message.answer(f'–°–µ–π—á–∞—Å —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º '
                                  f'–æ–¥–Ω—É –∏–∑ –¥–µ—Å—è—Ç–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–πüåü, –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ '
                                  f'–∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—à—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å–ø–æ—Å–æ–±—ã —Å–Ω–∏–∂–µ–Ω–∏—è '
                                  f'—É–≥–ª–µ—Ä–æ–¥–Ω–æ–≥–æ —Å–ª–µ–¥–∞', reply_markup=inline_case_pass_three)


async def interact_case_one(call: CallbackQuery):
    await call.answer(cache_time=5)
    await call.message.answer('–ö–∞–∫ —Ç–µ–±–µ –Ω–∞–±–æ—Ä?', reply_markup=inline_interaction_two)


def register_password_write_worker(dp: Dispatcher):
    dp.register_callback_query_handler(password_write_one, text_contains='carbonfootprint', state=None)
    # dp.register_callback_query_handler(password_write_one, text_contains='liveSitSeven', state=None)
    dp.register_callback_query_handler(password_write_two, text_contains='CasePasswordOne', state=None)
    dp.register_callback_query_handler(password_write_three, text_contains='CasePasswordTwo', state=None)
    dp.register_message_handler(password_write_four, state=DataPass.CasePassword)
    dp.register_callback_query_handler(password_write_five, text_contains='CasePasswordThree',
                                       state=DataPass.CaseVariant)

    dp.register_callback_query_handler(interact_case_one, text_contains='inlineInteractOne', state=None)
