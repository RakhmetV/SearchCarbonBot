from aiogram import Dispatcher
from aiogram.types import Message, InputFile, ContentTypes
import pandas as pd
from datetime import datetime
from openpyxl import load_workbook
from tgbot.handlers.message import team_name
from tgbot.keyboards.inline import start_bot_keyboard
from tgbot.keyboards.keyboards_menu import start_menu, interactive_menu, exel_menu, interactive_db
from tgbot.services.db import Database

db = Database('database.db')


async def send_video(message: Message):
    print(1)
    await message.answer_video(video='BAACAgIAAxkBAAJS9GMh1Uzs_b45tPyyZC8Zq-KEv2TPAAKfHAACEHURSchjJ3fKot6MKQQ')
    print(2)


async def drop(message: Message):
    db.del_all_users()


async def admin_start(message: Message):
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}', reply_markup=start_menu)


async def admin_menu(message: Message):
    # ---------------------
    if message.text == '–ü—Ä–æ–π—Ç–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤':
        await message.answer('–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤', reply_markup=interactive_menu)

    # ---------------------
    elif message.text == '–í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Exel':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–≥—Ä—É–∑–∫–∏', reply_markup=exel_menu)

    # ---------------------
    elif message.text == '–ù–∞—á–∞—Ç—å':
        if db.user_exists(message.from_user.id):
            await message.answer('–¢—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ)')
        else:
            await message.answer('–ü—Ä–∏–≤–µ—Ç!\n\n'
                                 '–°–µ–≥–æ–¥–Ω—è —Å —Ç–æ–±–æ–π –∫–æ–º–∞–Ω–¥–∞ –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ‚Äú–û–±—Ä–∞–∑. –±—É–¥—É—â–µ–≥–æ‚Äù ‚ú®\n\n'
                                 '–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –Ω–∞ –Ω–∞—à–µ–º –æ–±—É—á–∞—é—â–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ ‚Äú–í –ø–æ–∏—Å–∫–∞—Ö —É–≥–ª–µ—Ä–æ–¥–Ω–æ–≥–æ —Å–ª–µ–¥–∞‚Äù'
                                 '–î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ –∏—Å–∫–∞—Ç—å —É–≥–ª–µ—Ä–æ–¥–Ω—ã–π —Å–ª–µ–¥üïµÔ∏èüïµÔ∏è‚Äç‚ôÄÔ∏è', parse_mode='HTML',
                                 reply_markup=start_bot_keyboard)

    # ---------------------
    elif message.text == '–£–¥–∞–ª–∏—Ç—å –º–µ–Ω—è –∏–∑ –ë–î':
        db.del_user(message.from_user.id)
        await message.answer('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î')

    # ---------------------
    elif message.text == '–ù–∞–∑–∞–¥':
        await message.answer('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=start_menu)

    # ---------------------
    elif message.text == '–ó–∞ —Å–µ–≥–æ–¥–Ω—è':
        nowdate = datetime.now()
        newdate = nowdate.strftime("%d/%m/%Y")  # –ù–µ –≥–æ—Ç–æ–≤–æ –µ—â–µ
        if bool(len(db.get_user_today(newdate))):
            await message.answer('–î–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è')

            users_today = db.get_user_today(newdate)
            name = []
            college = []
            date = []
            variant = []
            answer_one = []
            answer_two = []
            feedback = []
            for user in users_today:
                name.append(user[0])
                college.append(user[1])
                date.append(user[2])
                if bool(user[3]):
                    variant.append(team_name[user[3]])
                else:
                    variant.append('-1')
                answer_one.append(user[4])
                answer_two.append(user[5])
                feedback.append(user[6])

            df = pd.DataFrame({'–ò–º—è': name,
                               '–ú–µ—Å—Ç–æ —É—á–µ–±—ã': college,
                               '–î–∞—Ç–∞': date,
                               '–í–∞—Ä–∏–∞–Ω—Ç': variant,
                               '–û—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å': answer_one,
                               '–û—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å': answer_two,
                               '–û—Ç–∑—ã–≤': feedback})
            df.to_excel('./database_exel.xlsx', index=False)
            exel_file = open('database_exel.xlsx', 'rb')
            await message.answer_document(exel_file)
            exel_file.close()
        else:
            await message.answer('–°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤')

    # ---------------------
    elif message.text == '–ë–î':
        await message.answer('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=interactive_db)
    elif message.text == '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å':
        db.set_status_all()
        await message.answer('–î–ª—è –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è')
    elif message.text == '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –∏–∑ –±–¥':
        db.del_all_users()
        await message.answer('–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã')
    # ---------------------
    elif message.text == '–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è':  # –ù–µ –≥–æ—Ç–æ–≤–æ –µ—â–µ
        if bool(len(db.get_user_all())):
            await message.answer('–î–∞–Ω–Ω—ã–µ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è')
            users_all = db.get_user_all()
            name = []
            district = []
            college = []
            hobby = []
            favorite_subject = []
            interest_ecology = []
            studying_topic_one = []
            studying_topic_two = []
            studying_topic_three = []
            studying_topic_four = []
            date = []
            variant = []
            answer_one = []
            answer_two = []
            sum = []
            feedback = []
            for user in users_all:
                date.append(user[0])
                name.append(user[1])
                district.append(user[2])
                college.append(user[3])
                hobby.append(user[4])
                favorite_subject.append(user[5])
                interest_ecology.append(user[6])
                studying_topic_one.append(user[7])
                studying_topic_two.append(user[8])
                studying_topic_three.append(user[9])
                studying_topic_four.append(user[10])
                if bool(user[11]):
                    variant.append(team_name[user[11]])
                else:
                    variant.append('-1')
                answer_one.append(user[12])
                answer_two.append(user[13])
                feedback.append(user[14])

            df = pd.DataFrame({'–î–∞—Ç–∞': date,
                               '–ò–º—è': name,
                               '–†–∞–π–æ–Ω': district,
                               '–ú–µ—Å—Ç–æ —É—á–µ–±—ã': college,
                               '–£–≤–ª–µ—á–µ–Ω–∏—è': hobby,
                               '–õ—é–±–∏–º—ã–π –ø—Ä–µ–¥–º–µ—Ç': favorite_subject,
                               '–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è —ç–∫–æ–ª–æ–≥–∏–µ–π?': interest_ecology,
                               '–°–ª—ã—à–∞–ª –æ–± —É–≥–ª–µ—Ä–æ–¥–Ω–æ–º —Å–ª–µ–¥–µ?': studying_topic_one,
                               '–í–æ–ø—Ä–æ—Å –ø—Ä–æ –ª–∏—à–Ω–∏–π –≥–∞–∑': studying_topic_two,
                               '–ß—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —É–≥–ª–µ—Ä–æ–¥–Ω–æ–º—É —Å–ª–µ–¥—É?': studying_topic_three,
                               '–ü–æ–Ω—è–ª —á—Ç–æ —Ç–∞–∫–æ–µ —É–≥–ª–µ—Ä–æ–¥–Ω—ã–π —Å–ª–µ–¥?': studying_topic_four,
                               '–í–∞—Ä–∏–∞–Ω—Ç': variant,
                               '–û—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å': answer_one,
                               '–û—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å': answer_two,
                               '–û—Ç–∑—ã–≤': feedback})
            df.to_excel('./database_exel.xlsx', index=False)

            with open('database_exel.xlsx', 'rb') as exel_file:
                await message.answer_document(exel_file)
                exel_file.close()
        else:
            await message.answer('–ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤')

    # await message.answer_photo(photo, caption='–∂–µ–ª–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç')


async def video_id(message: Message):
    await message.reply(message.video.file_id)


def register_admin(dp: Dispatcher):
    dp.register_message_handler(admin_start, commands=["start"], state="*", is_admin=True)
    dp.register_message_handler(send_video, commands=["video"], state="*", is_admin=True)
    dp.register_message_handler(drop, commands=["drop_all"], state="*", is_admin=True)
    dp.register_message_handler(admin_menu, state=None, is_admin=True)
    dp.register_message_handler(video_id, content_types=ContentTypes.VIDEO, is_admin=True)
