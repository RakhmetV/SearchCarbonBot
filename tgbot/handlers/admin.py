from aiogram import Dispatcher
from aiogram.types import Message, InputFile
import pandas as pd
from datetime import datetime
from openpyxl import load_workbook
from tgbot.handlers.message import team_name
from tgbot.keyboards.inline import start_bot_keyboard
from tgbot.keyboards.keyboards_menu import start_menu, interactive_menu, exel_menu
from tgbot.services.db import Database


async def admin_start(message: Message):
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}', reply_markup=start_menu)


async def admin_menu(message: Message):
    db = Database('database.db')
    # ---------------------
    if message.text == '–ü—Ä–æ–π—Ç–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤':
        await message.answer('–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤', reply_markup=interactive_menu)

    # ---------------------
    elif message.text == '–í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Exel':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–≥—Ä—É–∑–∫–∏', reply_markup=exel_menu)

    # ---------------------
    elif message.text == '–ù–∞—á–∞—Ç—å':
        if db.user_exists(message.from_user.id):
            await message.answer('–¢—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ)')
        else:
            await message.answer('–ü—Ä–∏–≤–µ—Ç!\n\n'
                                 '–°–µ–≥–æ–¥–Ω—è —Å —Ç–æ–±–æ–π –∫–æ–º–∞–Ω–¥–∞ –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ‚Äú–û–±—Ä–∞–∑. –±—É–¥—É—â–µ–≥–æ‚Äù ‚ú®\n\n'
                                 '–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –Ω–∞ –Ω–∞—à–µ–º –æ–±—É—á–∞—é—â–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ ‚Äú–í –ø–æ–∏—Å–∫–∞—Ö —É–≥–ª–µ—Ä–æ–¥–Ω–æ–≥–æ —Å–ª–µ–¥–∞‚Äù'
                                 '–î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ –∏—Å–∫–∞—Ç—å —É–≥–ª–µ—Ä–æ–¥–Ω—ã–π —Å–ª–µ–¥üïµÔ∏èüïµÔ∏è‚Äç‚ôÄÔ∏è', parse_mode='HTML',
                                 reply_markup=start_bot_keyboard)

    # ---------------------
    elif message.text == '–£–¥–∞–ª–∏—Ç—å –º–µ–Ω—è –∏–∑ –ë–î':
        db.del_user(message.from_user.id)
        await message.answer('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î')

    # ---------------------
    elif message.text == '–ù–∞–∑–∞–¥':
        await message.answer('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=start_menu)

    # ---------------------
    elif message.text == '–ó–∞ —Å–µ–≥–æ–¥–Ω—è':
        nowdate = datetime.now()
        newdate = nowdate.strftime("%d/%m/%Y")  # –ù–µ –≥–æ—Ç–æ–≤–æ –µ—â–µ
        if bool(len(db.get_user_today(newdate))):
            await message.answer('–î–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è')

            users_today = db.get_user_today(newdate)
            name = []
            college = []
            date = []
            variant = []
            answer_one = []
            answer_two = []
            feedback = []
            for user in users_today:
                name.append(user[0])
                college.append(user[1])
                date.append(user[2])
                variant.append(team_name[user[3]])
                answer_one.append(user[4])
                answer_two.append(user[5])
                feedback.append(user[6])

            df = pd.DataFrame({'–ò–º—è': name,
                               '–ú–µ—Å—Ç–æ —É—á–µ–±—ã': college,
                               '–î–∞—Ç–∞': date,
                               '–í–∞—Ä–∏–∞–Ω—Ç': variant,
                               '–û—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å': answer_one,
                               '–û—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å': answer_two,
                               '–û—Ç–∑—ã–≤': feedback})
            df.to_excel('./database_exel.xlsx', index=False)
            exel_file = open('database_exel.xlsx', 'rb')
            await message.answer_document(exel_file)
            exel_file.close()
        else:
            await message.answer('–°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤')

     # ---------------------
    elif message.text == '–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è':  # –ù–µ –≥–æ—Ç–æ–≤–æ –µ—â–µ
        if bool(len(db.get_user_all())):
            await message.answer('–î–∞–Ω–Ω—ã–µ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è')
            users_all = db.get_user_all()
            name = []
            college = []
            date = []
            variant = []
            answer_one = []
            answer_two = []
            feedback = []
            for user in users_all:
                name.append(user[0])
                college.append(user[1])
                date.append(user[2])
                variant.append(team_name[user[3]])
                answer_one.append(user[4])
                answer_two.append(user[5])
                feedback.append(user[6])

            df = pd.DataFrame({'–ò–º—è': name,
                               '–ú–µ—Å—Ç–æ —É—á–µ–±—ã': college,
                               '–î–∞—Ç–∞': date,
                               '–í–∞—Ä–∏–∞–Ω—Ç': variant,
                               '–û—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å': answer_one,
                               '–û—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å': answer_two,
                               '–û—Ç–∑—ã–≤': feedback})
            df.to_excel('./database_exel.xlsx', index=False)

            with open('database_exel.xlsx', 'rb') as exel_file:
                await message.answer_document(exel_file)
                exel_file.close()
        else:
            await message.answer('–ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤')

    # await message.answer_photo(photo, caption='–∂–µ–ª–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç')


def register_admin(dp: Dispatcher):
    dp.register_message_handler(admin_start, commands=["start"], state="*", is_admin=True)
    dp.register_message_handler(admin_menu, state=None, is_admin=True)
