import asyncio
import random
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from datetime import datetime

from tgbot.handlers.message import district_name
from tgbot.keyboards.inline import acquaintance_bot, description_Nikita, description_Gulya, description_Yana, \
    description_Timyr, description_add_hero, description_eco, carbon_footprint
from tgbot.keyboards.inline_college import district_rt, college_inline_keyboard
from tgbot.services.db import Database
from tgbot.states.test import Data
db = Database('database.db')

async def start_bot(call: CallbackQuery):
    await call.answer(cache_time=5)
    await call.message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π', reply_markup=acquaintance_bot)


async def acquaintance_fun(call: CallbackQuery):
    await call.answer(cache_time=5)
    with open('nikita.png', 'rb') as photo:
        await call.message.answer_photo(photo,
                                        caption='–ú–µ–Ω—è –∑–æ–≤—É—Ç –ù–∏–∫–∏—Ç–∞\n\n–ú–µ–Ω—è —É–≤–ª–µ–∫–∞—é—Ç –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è –∏ —Ä–∞–∑–Ω—ã–µ –æ—Ç—Ä–∞—Å–ª–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. '
                                                '–ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å —è —Å–æ–∑–¥–∞–º —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ –¥–ª—è –≤—Å–µ–π –ø–ª–∞–Ω–µ—Ç—ã! –¢–æ–ª—å–∫–æ –≤–æ—Ç —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞—Ç—å? –ò –∫–æ–≥–æ –ø–æ–∑–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É? –õ–∞–¥–Ω–æ, —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –≤–º–µ—Å—Ç–µ!',
                                        reply_markup=description_Nikita)


async def helloNikita(call: CallbackQuery):
    await call.answer(cache_time=5)
    with open('gulya.png', 'rb') as photo:
        await call.message.answer_photo(photo, caption='–ü—Ä–∏–≤–µ—Ç, –ù–∏–∫–∏—Ç–∞! –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –Ø –ì—É–ª—è\n\n'
                                                       '–Ø –ª—é–±–ª—é –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –≤—Å—è–∫–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã. '
                                                       '–ù–∏–∫–∏—Ç–µ –Ω—É–∂–Ω–∞ –±—ã–ª–∞ –ø–æ–º–æ—â—å —Å —Ç–µ–º, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ,'
                                                       ' –∏ —è —Ä–µ—à–∏–ª–∞ –µ–º—É –ø–æ–º–æ—á—å. –ù–∏–∫–∏—Ç–∞ –ª—é–±–∏—Ç –∏–∑–æ–±—Ä–µ—Ç–∞—Ç—å, –∞ —è ‚Äî'
                                                       ' –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å. –ù–æ –º—ã –Ω–µ –º–æ–≥–ª–∏ –ø—Ä–∏–¥—É–º–∞—Ç—å —Ç–µ–º—É –¥–ª—è –Ω–∞—à–µ–≥–æ '
                                                       '–Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.',
                                        reply_markup=description_Gulya)


async def helloGulya(call: CallbackQuery):
    await call.answer(cache_time=5)
    with open('yana.png', 'rb') as photo:
        await call.message.answer_photo(photo, caption='–ü—Ä–∏–≤–µ—Ç, —è –Ø–Ω–∞\n\n'
                                                       '–Ø —É–≤–ª–µ–∫–∞—é—Å—å —ç–∫–æ–ª–æ–≥–∏–µ–π, –∑–Ω–∞—é –º–Ω–æ–≥–æ —ç–∫–æ-–ø—Ä–∏–≤—ã—á–µ–∫. '
                                                       '–í–æ—Ç –Ω–µ–¥–∞–≤–Ω–æ –º—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å —Å –ì—É–ª–µ–π –∏ –ù–∏–∫–∏—Ç–æ–π –≤ –ø–∞—Ä–∫–µ. '
                                                       '–ò–º –Ω—É–∂–Ω–∞ –±—ã–ª–∞ —Ç–µ–º–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –Ø –∏–º –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∞ '
                                                       '—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –ø–æ —ç–∫–æ–ª–æ–≥–∏–∏, –≤–µ–¥—å —ç—Ç–æ —Ç–æ, –≤ —á–µ–º —è –æ—Ç–ª–∏—á–Ω–æ '
                                                       '—Ä–∞–∑–±–∏—Ä–∞—é—Å—å!',
                                        reply_markup=description_Yana)


async def helloYana(call: CallbackQuery):
    await call.answer(cache_time=5)
    await call.message.answer('–£ –Ω–∞—Å –µ—Å—Ç—å –∫–ª–∞—Å—Å–Ω–∞—è —Ç–µ–º–∞, –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞, –∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—è '
                              '–∏ —ç–∫–æ–ª–æ–≥–∞. –ù–æ –Ω–∞–º –∫–æ–≥–æ-—Ç–æ –µ—â–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç')
    await asyncio.sleep(1)

    with open('timur.png', 'rb') as photo:
        await call.message.answer_photo(photo, caption='–ü—Ä–∏–≤–µ—Ç, —è –¢–∏–º—É—Ä\n\n'
                                                       '–Ø —É–≤–ª–µ–∫–∞—é—Å—å –Ω–∞—É–∫–æ–π, –≤ –±—É–¥—É—â–µ–º —è —Ç–æ—á–Ω–æ —Å—Ç–∞–Ω—É —É—á–µ–Ω—ã–º.'
                                                       ' –ö—Å—Ç–∞—Ç–∏, –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å '
                                                       '—Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç ‚Äî —ç—Ç–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ. –Ø–Ω–∞ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∞ –º–µ–Ω—è –≤ '
                                                       '–∫–æ–º–∞–Ω–¥—É, –∏ —è –∏–º –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ '
                                                       '–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º. –¢–æ –µ—Å—Ç—å, –º—ã —Å–∞–º–∏ –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å '
                                                       '–Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è!',
                                        reply_markup=description_Timyr)


async def helloTimyr(call: CallbackQuery):
    await call.answer(cache_time=5)
    await call.message.answer('–ù–∞—Å —á–µ—Ç–≤–µ—Ä–æ, –Ω–æ –≤ –∫–æ–º–∞–Ω–¥–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—è—Ç–µ—Ä–æ\n\n'
                              '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—à—å—Å—è –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ?', reply_markup=description_add_hero)
    await asyncio.sleep(1)


async def addNewHero(call: CallbackQuery):
    await call.answer(cache_time=5)
    await call.message.answer('–£ –Ω–∞—à–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –µ—Å—Ç—å —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥. –°–ø—Ä–æ—Å–∏ –µ–≥–æ —É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞')
    await Data.Password.set()


async def checkPassword(message: types.Message, state: FSMContext):
    data = await state.get_data()  # —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if not bool(data.get('password')):
        if message.text == '—Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑':
            await message.answer('–í–µ—Ä–Ω–æ: —Ç—ã –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É!')
            await asyncio.sleep(1)

            await message.answer('–î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É —á–ª–µ–Ω–∞ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã‚úåüèª')
            await asyncio.sleep(1)
            await message.answer('–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –ò–º—è)')
            await Data.next()
        else:
            await message.answer('–¢—ã –≤–≤–µ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥')


async def answer_name(message: types.Message, state: FSMContext):
    data = await state.get_data()  # —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if not bool(data.get('name')):
        nowdate = datetime.now()
        newdate = nowdate.strftime("%d/%m/%Y")

        answer = message.text
        await state.update_data(name=message.text)
        db.add_user(message.from_user.id, answer, newdate)

        await message.answer(f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {answer}ü•∞')
        await asyncio.sleep(1)
        await message.answer(
            '–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã —Ä–∞–π–æ–Ω–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω?', reply_markup=district_rt)
        await Data.next()


async def answer_district(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=5)
    db.set_district(call.message.chat.id, district_name[call.data.split(':')[1]])
    await call.message.answer('–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ',
                              reply_markup=college_inline_keyboard[call.data.split(':')[1]])
    await Data.next()


async def answer_college(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=5)
    db.set_college(call.message.chat.id, call.data.split(':')[1])
    await call.message.answer('–ù–∞–ø–∏—à–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏')
    await Data.next()


async def answer_hobbies(message: types.Message, state: FSMContext):
    # –¥–æ–±–∞–≤–∏—Ç—å —É–≤–ª–µ—á–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if len(message.text) <= 150:
        db.set_hobby(message.from_user.id, message.text)
        await message.answer('–ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –≤ —à–∫–æ–ª–µ —Ç—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ª—é–±–∏—à—å?')
        await Data.next()
    else:
        await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 150\n'
                             f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(message.text)}')


async def answer_favorite_sub(message: types.Message, state: FSMContext):
    if len(message.text) <= 50:
        db.set_favorite_subject(message.from_user.id, message.text)

        await message.answer('–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è –ª–∏ —Ç—ã —ç–∫–æ–ª–æ–≥–∏–µ–π?', reply_markup=description_eco)
        await Data.next()
    else:
        await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 150\n'
                             f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(message.text)}')


async def answer_eco(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=5)
    db.set_interest_ecology(call.message.chat.id, call.data.split(':')[1])
    await call.message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç—ã –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ!')
    await asyncio.sleep(1)
    await call.message.answer('–°–ª—ã—à–∞–ª –ª–∏ —Ç—ã –∫–æ–≥–¥–∞ –Ω–∏–±—É–¥—å –æ–± —É–≥–ª–µ—Ä–æ–¥–Ω–æ–º —Å–ª–µ–¥–µ?',
                              reply_markup=carbon_footprint)
    await state.finish()


# async def answer_education(message: types.Message, state: FSMContext):
#     data = await state.get_data()  # —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
#     if not bool(data.get('college')):
#         answer = message.text
#         if len(answer) > 60:
#             await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: 60\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(answer)}')
#             await asyncio.sleep(1)
#             await message.answer(f'–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
#         else:
#             await state.update_data(college=answer)
#             await asyncio.sleep(1)
#
#             await message.answer('–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –º—ã —Ä–∞–∑–¥–µ–ª–∏–º—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—ã')
#             await asyncio.sleep(1)
#
#             await message.answer('–ü–æ–ø—Ä–æ—Å–∏ —É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –ø–∞—Ä–æ–ª—å')
#             await asyncio.sleep(1)
#
#             await message.answer('–ü–æ–ª—É—á–∏–ª?', reply_markup=inline_password_one)
#             await asyncio.sleep(1)
#
#
# async def inlinePasswordOne(call: CallbackQuery, state: FSMContext):
#     await call.message.answer('–¢—ã –ø–æ–ª—É—á–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞‚öõ')
#     await asyncio.sleep(1)
#
#     await call.message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–π–¥–∏ —Ñ–æ—Ä–º—É–ª—É –¥–∞–Ω–Ω–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞, –ø–æ–∫–∞–∂–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –¥–∞–Ω–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –∏ —Å–≤–µ—Ä—å—Å—è')
#     await asyncio.sleep(1)
#
#     await call.message.answer('–ù–∞—à–µ–ª —Ñ–æ—Ä–º—É–ª—É –¥–∞–Ω–Ω–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞?', reply_markup=inline_password_two)
#     await asyncio.sleep(1)
#
#
# async def inlinePasswordTwo(call: CallbackQuery, state: FSMContext):
#     await call.message.answer('–î–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –≤–µ—â–µ—Å—Ç–≤–∞ –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è –ø–∞—Ä–æ–ª–µ–º')
#     await asyncio.sleep(1)
#
#     await call.message.answer('–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å (–ó–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —à—Ä–∏—Ñ—Ç–æ–º)')
#     await Data.next()
#
#
# async def answer_case_password(message: types.Message, state: FSMContext):
#     answer = message.text
#     await state.update_data(password_case=answer)
#     db = Database('database.db')
#     nowdate = datetime.now()
#     newdate = nowdate.strftime("%d/%m/%Y")
#     if answer in team_selection:
#         data = await state.get_data()  # —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
#         name = data.get('name')
#         college = data.get('college')
#         db.add_user(message.from_user.id,
#                     name,
#                     college,
#                     newdate,
#                     team_selection[answer]
#                     )  # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#
#         variant = random.randint(0, 9)
#         if db.counting_variant_case(team_selection[answer], newdate)[0][0] > 10:
#             await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ 10\n'
#                                  f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—å')
#         else:
#             check = False
#             while db.check_variant(newdate, team_selection[answer], variant):
#                 if db.counting_variant_case(team_selection[answer], newdate)[0][0] > 10:
#                     check = True
#                     break
#                 else:
#                     variant = random.randint(0, 9)
#
#             if check:
#                 await message.answer(
#                     f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ 10\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—å')
#             else:
#                 db.set_variant(message.from_user.id, variant)
#                 await message.answer(f'–í—ã –≤ –∫–æ–º–∞–Ω–¥–µ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {team_selection[answer]} üôå')
#                 await asyncio.sleep(1)
#
#                 await message.answer(f'–£–∑–Ω–∞–π —É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞, –≤ —Ç–æ–π –ª–∏ —Ç—ã –∫–æ–º–∞–Ω–¥–µ —Å–∏–¥–∏—à—å —Å–µ–π—á–∞—Å\n\n'
#                                      f'–ï—Å–ª–∏ –≤ —Ç–æ–π, –æ—Å—Ç–∞–≤–∞–π—Å—è –Ω–∞ –º–µ—Å—Ç–∞—Ö. –ï—Å–ª–∏ —Ç—ã –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ, –ø–µ—Ä–µ—Å—è–¥—å')
#                 await asyncio.sleep(1)
#
#                 await message.answer('–ù–∞—à–µ–ª —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É?', reply_markup=inline_password_three)
#                 await asyncio.sleep(1)
#
#                 # await message.answer(f'–°—É–ø–µ—Ä, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ <b>{team_name[variant]}</b>',
#                 #                      parse_mode='HTML')
#                 # await asyncio.sleep(1)
#                 #
#                 # await state.finish()  # –æ—á–∏—â–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
#                 # await message.answer('–ù–∞–∑–æ–≤–∏ —Ç–µ–º—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É. –û–Ω –≤—ã–¥–∞—Å—Ç —Ç–µ–±–µ –Ω–∞–±–æ—Ä –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è')
#                 # await asyncio.sleep(3)
#                 # await message.answer('–ö–∞–∫ —Ç–µ–±–µ –Ω–∞–±–æ—Ä?', reply_markup=likeTheSet)
#     else:
#         await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å–Ω–æ–≤–∞')
#
#
# async def inlinePasswordThree(call: CallbackQuery, state: FSMContext):
#     db = Database('database.db')
#     variant = db.get_variant(call.message.chat.id)
#
#     await call.message.answer('–û—Ç–ª–∏—á–Ω–æ!')
#     await asyncio.sleep(1)
#
#     await call.message.answer(f'–°–µ–≥–æ–¥–Ω—è —Ç—ã –±—É–¥–µ—à—å –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ <b>{team_name[variant[0][0]]}</b>',
#                               parse_mode='HTML')
#     await asyncio.sleep(1)
#
#     await call.message.answer(
#         '–ù–∞–∑–æ–≤–∏ —Ç–µ–º—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É. '
#         '–û–Ω –≤—ã–¥–∞—Å—Ç —Ç–µ–±–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–º–æ–¥–∞–Ω—á–∏–∫ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è')
#     await asyncio.sleep(1)
#
#     await call.message.answer('–ü–æ–ª—É—á–∏–ª —á–µ–º–æ–¥–∞–Ω—á–∏–∫?', reply_markup=inline_interaction_one)
#     await asyncio.sleep(1)
#
#     await state.finish()  # –æ—á–∏—â–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
#
#
# async def inlineIntecactiveThree(call: CallbackQuery):
#     await call.message.answer('–ö–∞–∫ —Ç–µ–±–µ –Ω–∞–±–æ—Ä?', reply_markup=inline_interaction_two)


def register_data_collection(dp: Dispatcher):
    dp.register_callback_query_handler(start_bot, text_contains='start', state=None)
    dp.register_callback_query_handler(acquaintance_fun, text_contains='acquaintance', state=None)
    dp.register_callback_query_handler(helloNikita, text_contains='helloNikita', state=None)
    dp.register_callback_query_handler(helloGulya, text_contains='helloGulya', state=None)
    dp.register_callback_query_handler(helloYana, text_contains='helloYana', state=None)
    dp.register_callback_query_handler(helloTimyr, text_contains='helloTimyr', state=None)
    dp.register_callback_query_handler(addNewHero, text_contains='AddUserInComand', state=None)
    dp.register_message_handler(checkPassword, state=Data.Password)
    dp.register_message_handler(answer_name, state=Data.Name)
    dp.register_callback_query_handler(answer_district, text_contains='district', state=Data.District)
    dp.register_callback_query_handler(answer_college, text_contains='college', state=Data.College)
    dp.register_message_handler(answer_hobbies, state=Data.Hobbies)
    dp.register_message_handler(answer_favorite_sub, state=Data.Favorite_subject)
    dp.register_callback_query_handler(answer_eco, text_contains='ecoSearch', state=Data.Eco)

    # dp.register_message_handler(answer_education, state=Data.EducationalInstitution)
    # dp.register_callback_query_handler(inlinePasswordOne, text_contains='inlinePassOne',
    #                                    state=Data.EducationalInstitution)
    # dp.register_callback_query_handler(inlinePasswordTwo, text_contains='inlinePassTwo',
    #                                    state=Data.EducationalInstitution)
    #
    # dp.register_message_handler(answer_case_password, state=Data.PasswordCase)
    #
    # dp.register_callback_query_handler(inlinePasswordThree, text_contains='inlinePassThree',
    #                                    state=Data.PasswordCase)
    # dp.register_callback_query_handler(inlineIntecactiveThree, text_contains='inlineInteractOne',
    #                                    state=None)
