import asyncio
import random
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from datetime import datetime

from tgbot.handlers.message import district_name
from tgbot.keyboards.inline import acquaintance_bot, description_Nikita, description_Gulya, description_Yana, \
    description_Timyr, description_add_hero, description_eco, carbon_footprint
from tgbot.keyboards.inline_college import district_rt, college_inline_keyboard
from tgbot.services.db import Database
from tgbot.states.test import Data

db = Database('database.db')


async def start_bot(call: CallbackQuery):
    await call.answer(cache_time=5)
    await call.message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π‚ò∫', reply_markup=acquaintance_bot)


async def acquaintance_fun(call: CallbackQuery):
    await call.answer(cache_time=5)
    await call.message.answer_sticker(
        sticker='CAACAgIAAxkBAAIKTWMf886YA250jvZ3xIDnpWTEg6cOAAIqIAACOUcBSbK3nTPwlyI5KQQ')
    await call.message.answer('–ú–µ–Ω—è –∑–æ–≤—É—Ç –ù–∏–∫–∏—Ç–∞\n\n'
                              '–ú–µ–Ω—è —É–≤–ª–µ–∫–∞—é—Ç –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è –∏ —Ä–∞–∑–Ω—ã–µ –æ—Ç—Ä–∞—Å–ª–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏üè≠\n'
                              '–ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å —è —Å–æ–∑–¥–∞–º —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ –¥–ª—è –≤—Å–µ–π –ø–ª–∞–Ω–µ—Ç—ã!\n\n'
                              '–¢–æ–ª—å–∫–æ –≤–æ—Ç —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞—Ç—å? –ò –∫–æ–≥–æ –ø–æ–∑–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É?\n\n'
                              '–õ–∞–¥–Ω–æ, —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –≤–º–µ—Å—Ç–µüñê!',
                              reply_markup=description_Nikita)


async def helloNikita(call: CallbackQuery):
    await call.answer(cache_time=5)
    await call.message.answer_sticker(
        sticker='CAACAgIAAxkBAAIKS2Mf88xGkMUD0B0tJ25Mo7k5z-aJAAIJGwACgmMAAUkeOIwi7tLzgykE')

    await call.message.answer('–ü—Ä–∏–≤–µ—Ç, –ù–∏–∫–∏—Ç–∞! –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –Ø –ì—É–ª—è üòä\n\n'
                              '–Ø –ª—é–±–ª—é –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –≤—Å—è–∫–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã. '
                              '–ù–∏–∫–∏—Ç–µ –Ω—É–∂–Ω–∞ –±—ã–ª–∞ –ø–æ–º–æ—â—å —Å —Ç–µ–º, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ, '
                              '–∏ —è —Ä–µ—à–∏–ª–∞ –µ–º—É –ø–æ–º–æ—á—å. –ù–∏–∫–∏—Ç–∞ –ª—é–±–∏—Ç –∏–∑–æ–±—Ä–µ—Ç–∞—Ç—å, '
                              '–∞ —è ‚Äî –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å.\n\n'
                              '–ù–æ –º—ã –Ω–µ –º–æ–≥–ª–∏ –ø—Ä–∏–¥—É–º–∞—Ç—å —Ç–µ–º—É –¥–ª—è –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ü§î',
                              reply_markup=description_Gulya)


async def helloGulya(call: CallbackQuery):
    await call.answer(cache_time=5)
    await call.message.answer_sticker(
        sticker='CAACAgIAAxkBAAIKT2Mf89BmctGgxDyZ-4kr4n9KxmfkAAIpKQACJ8IAAUlkK54XjzwGvikE')

    await call.message.answer('–ü—Ä–∏–≤–µ—Ç, —è –Ø–Ω–∞‚úåüèª\n\n'
                              '–Ø —É–≤–ª–µ–∫–∞—é—Å—å —ç–∫–æ–ª–æ–≥–∏–µ–π, –∑–Ω–∞—é –º–Ω–æ–≥–æ —ç–∫–æ-–ø—Ä–∏–≤—ã—á–µ–∫.üåø\n\n'
                              '–í–æ—Ç –Ω–µ–¥–∞–≤–Ω–æ –º—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å —Å –ì—É–ª–µ–π –∏ –ù–∏–∫–∏—Ç–æ–π –≤ –ø–∞—Ä–∫–µ. '
                              '–ò–º –Ω—É–∂–Ω–∞ –±—ã–ª–∞ —Ç–µ–º–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.\n\n'
                              '–Ø –∏–º –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç '
                              '–ø–æ —ç–∫–æ–ª–æ–≥–∏–∏, –≤–µ–¥—å —ç—Ç–æ —Ç–æ, –≤ —á–µ–º —è –æ—Ç–ª–∏—á–Ω–æ '
                              '—Ä–∞–∑–±–∏—Ä–∞—é—Å—å!',
                              reply_markup=description_Yana)


async def helloYana(call: CallbackQuery):
    await call.answer(cache_time=5)
    await call.message.answer('–£ –Ω–∞—Å –µ—Å—Ç—å –∫–ª–∞—Å—Å–Ω–∞—è —Ç–µ–º–∞, –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞, –∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—è '
                              '–∏ —ç–∫–æ–ª–æ–≥–∞. –ù–æ –Ω–∞–º –∫–æ–≥–æ-—Ç–æ –µ—â–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Çü§î')
    await asyncio.sleep(3)
    await call.message.answer_sticker(sticker='CAACAgIAAxkBAAIKSWMf88q62Tq38G5ROUkDRDQipQXBAALZHwACPicBSXADhHQ3AuSOKQQ')
    await call.message.answer('–ü—Ä–∏–≤–µ—Ç, —è –¢–∏–º—É—Äüëãüèª\n\n'
                              '–Ø —É–≤–ª–µ–∫–∞—é—Å—å –Ω–∞—É–∫–æ–π, –≤ –±—É–¥—É—â–µ–º —è —Ç–æ—á–Ω–æ —Å—Ç–∞–Ω—É —É—á–µ–Ω—ã–º.'
                              ' –ö—Å—Ç–∞—Ç–∏, –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å '
                              '—Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç ‚Äî —ç—Ç–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µüîç\n\n'
                              '–Ø–Ω–∞ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∞ –º–µ–Ω—è –≤ '
                              '–∫–æ–º–∞–Ω–¥—É, –∏ —è –∏–º –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ '
                              '–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º. –¢–æ –µ—Å—Ç—å, –º—ã —Å–∞–º–∏ –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å '
                              '–Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è!‚ö°Ô∏è',
                              reply_markup=description_Timyr)


async def helloTimyr(call: CallbackQuery):
    await call.answer(cache_time=5)
    await call.message.answer('–ù–∞—Å —á–µ—Ç–≤–µ—Ä–æ, –Ω–æ –≤ –∫–æ–º–∞–Ω–¥–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—è—Ç–µ—Ä–æ\n\n'
                              '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—à—å—Å—è –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ?', reply_markup=description_add_hero)


async def addNewHero(call: CallbackQuery):
    await call.answer(cache_time=5)
    await call.message.answer('–£ –Ω–∞—à–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –µ—Å—Ç—å —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥.üîê\n\n'
                              '–°–ø—Ä–æ—Å–∏ –µ–≥–æ —É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞')
    await Data.Password.set()


async def checkPassword(message: types.Message, state: FSMContext):
    data = await state.get_data()  # —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if not bool(data.get('password')):
        if message.text == '—Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑' or message.text == '–§–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑':
            await message.answer('–í–µ—Ä–Ω–æ: —Ç—ã –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É!')
            await asyncio.sleep(3)

            await message.answer('–î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É —á–ª–µ–Ω–∞ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã‚úåüèª')
            await asyncio.sleep(3)
            await message.answer('–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –ò–º—è)')
            await Data.next()
        else:
            await message.answer('–¢—ã –≤–≤–µ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥')


async def answer_name(message: types.Message, state: FSMContext):
    data = await state.get_data()  # —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if not bool(data.get('name')):
        nowdate = datetime.now()
        newdate = nowdate.strftime("%d/%m/%Y")

        answer = message.text
        await state.update_data(name=message.text)
        db.add_user(message.from_user.id, answer, newdate)

        await message.answer(f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {answer}ü•∞')
        await asyncio.sleep(4)
        await message.answer(
            '–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã —Ä–∞–π–æ–Ω–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω?', reply_markup=district_rt)
        await Data.next()


async def answer_district(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=5)
    db.set_district(call.message.chat.id, district_name[call.data.split(':')[1]])
    await call.message.answer('–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µüè´',
                              reply_markup=college_inline_keyboard[call.data.split(':')[1]])
    await Data.next()


async def answer_college(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=5)
    db.set_college(call.message.chat.id, call.data.split(':')[1])
    await call.message.answer('–ù–∞–ø–∏—à–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏üé®üèÄ')
    await Data.next()


async def answer_hobbies(message: types.Message, state: FSMContext):
    # –¥–æ–±–∞–≤–∏—Ç—å —É–≤–ª–µ—á–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if len(message.text) <= 150:
        db.set_hobby(message.from_user.id, message.text)
        await message.answer('–ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –≤ —à–∫–æ–ª–µ —Ç—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ª—é–±–∏—à—å?üìö')
        await Data.next()
    else:
        await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 150\n'
                             f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(message.text)}')


async def answer_favorite_sub(message: types.Message, state: FSMContext):
    if len(message.text) <= 50:
        db.set_favorite_subject(message.from_user.id, message.text)
        await Data.next()
        await message.answer('–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è –ª–∏ —Ç—ã —ç–∫–æ–ª–æ–≥–∏–µ–πüå≥?', reply_markup=description_eco)
    else:
        await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 150\n'
                             f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(message.text)}')


async def data_coll_one(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=5)
    db.set_interest_ecology(call.message.chat.id, call.data.split(':')[1])
    await state.finish()

    await call.message.answer('–°–ª—ã—à–∞–ª –ª–∏ —Ç—ã –∫–æ–≥–¥–∞ –Ω–∏–±—É–¥—å –æ–± —É–≥–ª–µ—Ä–æ–¥–Ω–æ–º —Å–ª–µ–¥–µ?üë£',
                              reply_markup=carbon_footprint)


def register_data_collection(dp: Dispatcher):
    dp.register_callback_query_handler(start_bot, text_contains='start', state=None)

    dp.register_callback_query_handler(acquaintance_fun, text_contains='acquaintance', state=None)
    dp.register_callback_query_handler(helloNikita, text_contains='helloNikita', state=None)
    dp.register_callback_query_handler(helloGulya, text_contains='helloGulya', state=None)
    dp.register_callback_query_handler(helloYana, text_contains='helloYana', state=None)
    dp.register_callback_query_handler(helloTimyr, text_contains='helloTimyr', state=None)
    dp.register_callback_query_handler(addNewHero, text_contains='AddUserInComand', state=None)
    dp.register_message_handler(checkPassword, state=Data.Password)
    dp.register_message_handler(answer_name, state=Data.Name)
    dp.register_callback_query_handler(answer_district, text_contains='district', state=Data.District)
    dp.register_callback_query_handler(answer_college, text_contains='college', state=Data.College)
    dp.register_message_handler(answer_hobbies, state=Data.Hobbies)
    dp.register_message_handler(answer_favorite_sub, state=Data.Favorite_subject)
    dp.register_callback_query_handler(data_coll_one, text_contains='ecoSearch', state=Data.Eco)

    # dp.register_message_handler(answer_education, state=Data.EducationalInstitution)
    # dp.register_callback_query_handler(inlinePasswordOne, text_contains='inlinePassOne',
    #                                    state=Data.EducationalInstitution)
    # dp.register_callback_query_handler(inlinePasswordTwo, text_contains='inlinePassTwo',
    #                                    state=Data.EducationalInstitution)
    #
    # dp.register_message_handler(answer_case_password, state=Data.PasswordCase)
    #
    # dp.register_callback_query_handler(inlinePasswordThree, text_contains='inlinePassThree',
    #                                    state=Data.PasswordCase)
    # dp.register_callback_query_handler(inlineIntecactiveThree, text_contains='inlineInteractOne',
    #                                    state=None)
