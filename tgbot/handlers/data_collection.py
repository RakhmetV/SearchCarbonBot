import asyncio
import random
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from datetime import datetime

from tgbot.handlers.message import team_selection, team_name
from tgbot.keyboards.inline import inline_password_one, inline_password_two, inline_password_three, \
    inline_interaction_one, inline_interaction_two
from tgbot.services.db import Database
from tgbot.states.test import Data


async def start_bot(call: CallbackQuery):
    await call.answer(cache_time=5)
    await call.message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è‚úåüèª')
    await asyncio.sleep(1)
    await call.message.answer('–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
    await Data.Name.set()


async def answer_name(message: types.Message, state: FSMContext):
    data = await state.get_data()  # —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if not bool(data.get('name')):
        answer = message.text

        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ state
        await state.update_data(name=answer)

        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ state –í–∞—Ä–∏–∞–Ω—Ç 2
        # await state.update_data(
        #     {'answear1':answer}
        # )

        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ state –í–∞—Ä–∏–∞–Ω—Ç 3
        # async with state.proxy() as data:
        #     data['answer1'] = answer
        # –£–¥–æ–±–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å data['answer1']+=1
        # –∏–ª–∏ data['list'].append(1), —Ç.–∫ –Ω–µ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –¥–æ—Å—Ç–∞–≤–∞—Ç—å –∏–∑ —Å—Ç–µ–π—Ç–∞. –∞ –ø–æ—Ç–æ–º –∑–∞–¥–∞–≤–∞—Ç—å

        await message.answer(f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {answer}ü•∞')
        await asyncio.sleep(1)
        await message.answer(
            '–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è?\n'
            '(–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è)\n\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä, –®–∫–æ–ª–∞ ‚Ññ2, –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π –ª–∏—Ü–µ–π, –ì–∏–º–Ω–∞–∑–∏—è ‚Ññ39')
        await Data.next()


async def answer_education(message: types.Message, state: FSMContext):
    data = await state.get_data()  # —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if not bool(data.get('college')):
        answer = message.text
        if len(answer) > 60:
            await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: 60\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(answer)}')
            await asyncio.sleep(1)
            await message.answer(f'–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
        else:
            await state.update_data(college=answer)
            await asyncio.sleep(1)

            await message.answer('–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –º—ã —Ä–∞–∑–¥–µ–ª–∏–º—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—ã')
            await asyncio.sleep(1)

            await message.answer('–ü–æ–ø—Ä–æ—Å–∏ —É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –ø–∞—Ä–æ–ª—å')
            await asyncio.sleep(1)

            await message.answer('–ü–æ–ª—É—á–∏–ª?', reply_markup=inline_password_one)
            await asyncio.sleep(1)


async def inlinePasswordOne(call: CallbackQuery, state: FSMContext):
    await call.message.answer('–¢—ã –ø–æ–ª—É—á–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞‚öõ')
    await asyncio.sleep(1)

    await call.message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–π–¥–∏ —Ñ–æ—Ä–º—É–ª—É –¥–∞–Ω–Ω–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞, –ø–æ–∫–∞–∂–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –¥–∞–Ω–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –∏ —Å–≤–µ—Ä—å—Å—è')
    await asyncio.sleep(1)

    await call.message.answer('–ù–∞—à–µ–ª —Ñ–æ—Ä–º—É–ª—É –¥–∞–Ω–Ω–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞?', reply_markup=inline_password_two)
    await asyncio.sleep(1)


async def inlinePasswordTwo(call: CallbackQuery, state: FSMContext):
    await call.message.answer('–î–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –≤–µ—â–µ—Å—Ç–≤–∞ –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è –ø–∞—Ä–æ–ª–µ–º')
    await asyncio.sleep(1)

    await call.message.answer('–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å (–ó–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —à—Ä–∏—Ñ—Ç–æ–º)')
    await Data.next()


async def answer_case_password(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(password=answer)
    db = Database('database.db')
    nowdate = datetime.now()
    newdate = nowdate.strftime("%d/%m/%Y")
    if answer in team_selection:
        data = await state.get_data()  # —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
        name = data.get('name')
        college = data.get('college')
        db.add_user(message.from_user.id,
                    name,
                    college,
                    newdate,
                    team_selection[answer]
                    )  # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        variant = random.randint(0, 9)
        if db.counting_variant_case(team_selection[answer], newdate)[0][0] > 10:
            await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ 10\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—å')
        else:
            check = False
            while db.check_variant(newdate, team_selection[answer], variant):
                if db.counting_variant_case(team_selection[answer], newdate)[0][0] > 10:
                    check = True
                    break
                else:
                    variant = random.randint(0, 9)

            if check:
                await message.answer(
                    f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ 10\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—å')
            else:
                db.set_variant(message.from_user.id, variant)
                await message.answer(f'–í—ã –≤ –∫–æ–º–∞–Ω–¥–µ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {team_selection[answer]} üôå')
                await asyncio.sleep(1)

                await message.answer(f'–£–∑–Ω–∞–π —É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞, –≤ —Ç–æ–π –ª–∏ —Ç—ã –∫–æ–º–∞–Ω–¥–µ —Å–∏–¥–∏—à—å —Å–µ–π—á–∞—Å\n\n'
                                     f'–ï—Å–ª–∏ –≤ —Ç–æ–π, –æ—Å—Ç–∞–≤–∞–π—Å—è –Ω–∞ –º–µ—Å—Ç–∞—Ö. –ï—Å–ª–∏ —Ç—ã –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ, –ø–µ—Ä–µ—Å—è–¥—å')
                await asyncio.sleep(1)

                await message.answer('–ù–∞—à–µ–ª —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É?', parse_mode=inline_password_three)
                await asyncio.sleep(1)

                # await message.answer(f'–°—É–ø–µ—Ä, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ <b>{team_name[variant]}</b>',
                #                      parse_mode='HTML')
                # await asyncio.sleep(1)
                #
                # await state.finish()  # –æ—á–∏—â–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                # await message.answer('–ù–∞–∑–æ–≤–∏ —Ç–µ–º—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É. –û–Ω –≤—ã–¥–∞—Å—Ç —Ç–µ–±–µ –Ω–∞–±–æ—Ä –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è')
                # await asyncio.sleep(3)
                # await message.answer('–ö–∞–∫ —Ç–µ–±–µ –Ω–∞–±–æ—Ä?', reply_markup=likeTheSet)
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å–Ω–æ–≤–∞')

    # await Test.next()


async def inlinePasswordThree(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()  # —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
    variant = data.get('variant')
    await call.message.answer('–û—Ç–ª–∏—á–Ω–æ!')
    await asyncio.sleep(1)

    await call.message.answer(f'–°–µ–≥–æ–¥–Ω—è —Ç—ã –±—É–¥–µ—à—å –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ <b>{team_name[variant]}</b>',
                              parse_mode='HTML')
    await asyncio.sleep(1)

    await call.message.answer(
        '–ù–∞–∑–æ–≤–∏ —Ç–µ–º—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É. –û–Ω –≤—ã–¥–∞—Å—Ç —Ç–µ–±–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–º–æ–¥–∞–Ω—á–∏–∫ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è')
    await asyncio.sleep(1)

    await call.message.answer('–ü–æ–ª—É—á–∏–ª —á–µ–º–æ–¥–∞–Ω—á–∏–∫?', reply_markup=inline_interaction_one)
    await asyncio.sleep(1)

    await state.finish()  # –æ—á–∏—â–∞–µ–º –ø–æ–∑–∏—Ü–∏—é

async def inlineIntecactiveThree(call: CallbackQuery):

    await call.message.answer('–ö–∞–∫ —Ç–µ–±–µ –Ω–∞–±–æ—Ä?', reply_markup=inline_interaction_two)


def register_data_collection(dp: Dispatcher):
    dp.register_callback_query_handler(start_bot, text_contains='start', state=None)
    dp.register_message_handler(answer_name, state=Data.Name)
    dp.register_message_handler(answer_education, state=Data.EducationalInstitution)
    dp.register_callback_query_handler(inlinePasswordOne, text_contains='inlinePassOne',
                                       state=Data.EducationalInstitution)
    dp.register_callback_query_handler(inlinePasswordTwo, text_contains='inlinePassTwo',
                                       state=Data.EducationalInstitution)

    dp.register_message_handler(answer_case_password, state=Data.PasswordCase)

    dp.register_callback_query_handler(inlinePasswordThree, text_contains='inlinePassThree',
                                       state=Data.PasswordCase)
    dp.register_callback_query_handler(inlineIntecactiveThree, text_contains='inlineInteractOne',
                                       state=None)
